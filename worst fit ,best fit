#include <stdio.h>
#include <conio.h>

#define MAX 10

void firstFit(int blockSize[], int m, int processSize[], int n);
void bestFit(int blockSize[], int m, int processSize[], int n);
void worstFit(int blockSize[], int m, int processSize[], int n);

void main() {
    int blockSize[MAX], processSize[MAX];
    int m, n, i, choice;
    
    clrscr();
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter the size of each memory block:\n");
    for (i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    printf("\nEnter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the size of each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

    do {
        printf("\nMemory Allocation Menu\n");
        printf("1. First Fit\n");
        printf("2. Best Fit\n");
        printf("3. Worst Fit\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                firstFit(blockSize, m, processSize, n);
                break;
            case 2:
                bestFit(blockSize, m, processSize, n);
                break;
            case 3:
                worstFit(blockSize, m, processSize, n);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Try again.\n");
        }
    } while (choice != 4);

    getch();
}

void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[MAX], i, j;
    int tempBlock[MAX];

    // Copy original block sizes to tempBlock to avoid altering them
    for (i = 0; i < m; i++)
        tempBlock[i] = blockSize[i];

    for (i = 0; i < n; i++) {
        allocation[i] = -1;  // Initialize allocation to -1
        for (j = 0; j < m; j++) {
            if (tempBlock[j] >= processSize[i]) {
                allocation[i] = j;
                tempBlock[j] -= processSize[i];
                break;
            }
        }
    }

    printf("\nFirst Fit Allocation:\n");
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[MAX], i, j;
    int tempBlock[MAX];

    for (i = 0; i < m; i++)
        tempBlock[i] = blockSize[i];

    for (i = 0; i < n; i++) {
        allocation[i] = -1;
        int bestIndex = -1;

        for (j = 0; j < m; j++) {
            if (tempBlock[j] >= processSize[i]) {
                if (bestIndex == -1 || tempBlock[j] < tempBlock[bestIndex]) {
                    bestIndex = j;
                }
            }
        }

        if (bestIndex != -1) {
            allocation[i] = bestIndex;
            tempBlock[bestIndex] -= processSize[i];
        }
    }

    printf("\nBest Fit Allocation:\n");
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[MAX], i, j;
    int tempBlock[MAX];

    for (i = 0; i < m; i++)
        tempBlock[i] = blockSize[i];

    for (i = 0; i < n; i++) {
        allocation[i] = -1;
        int worstIndex = -1;

        for (j = 0; j < m; j++) {
            if (tempBlock[j] >= processSize[i]) {
                if (worstIndex == -1 || tempBlock[j] > tempBlock[worstIndex]) {
                    worstIndex = j;
                }
            }
        }

        if (worstIndex != -1) {
            allocation[i] = worstIndex;
            tempBlock[worstIndex] -= processSize[i];
        }
    }

    printf("\nWorst Fit Allocation:\n");
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}